(()=>{"use strict";var n={341:(n,e,t)=>{t.d(e,{Z:()=>d});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --hover: #b0438a;\n    --shadow: #5ca3b4;\n    --form: #005f73;\n    --formBorder: hsl(234, 75%, 21%);\n    --button: #eee8aa;\n    --btnBGC: #24a0ed;\n}\n\nhtml {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    background-color: #a5dbe6;\n    font-size: 14px;\n    /* height: 100vh; */\n}\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-areas:\n        'header'\n        'calendar'\n        'main'\n        'footer';\n    grid-template-rows: auto 2fr 5fr auto;\n}\n#main,\n#calendar {\n    overflow-y: auto;\n}\n\nul {\n    list-style-type: none;\n}\n\n#header {\n    grid-area: header;\n    color: var(--button);\n    background-color: var(--form);\n    text-align: center;\n    padding: 1vh 0;\n}\n#calendar {\n    grid-area: calendar;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    text-align: center;\n    font-size: 3vw;\n    padding: 0;\n    margin: 1vh 0;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.arrow {\n    width: 2.5vw;\n    margin-top: 2vh;\n    background-color: var(--btnBGC);\n    border-radius: 50%;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n#calendar ul {\n    display: flex;\n    justify-content: space-evenly;\n}\n#calendar li {\n    border-left: dashed var(--form) 2px;\n    margin-right: 0.5%;\n}\n#calendar li:nth-child(1),\n#calendar li:nth-child(2),\n#calendar li:nth-child(9) {\n    border-left: none;\n}\n#calendar li:nth-child(1),\n#calendar li:nth-child(9) {\n    background-color: var(--shadow);\n}\n.paraDay {\n    font-weight: 300;\n    font-size: 2vw;\n    background-color: var(--shadow);\n    color: whitesmoke;\n    border-radius: 45%;\n    padding: 0.5vw;\n    margin: 0.25vw;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.paraDay:hover,\n.arrow:hover {\n    background-color: #fff;\n    cursor: pointer;\n    color: var(--formBorder);\n}\n.tasksToday {\n    text-align: left;\n    padding-left: 0.5vw;\n    font-size: 3vw;\n    font-family: monospace;\n    font-weight: 300;\n}\n.cardDay {\n    font-weight: 800;\n    width: calc(100% / 7);\n}\n#main {\n    grid-area: main;\n    display: flex;\n    flex-direction: column;\n}\n.card {\n    border: solid var(--hover) 1px;\n    padding: 1vw;\n    background-color: #93cdda;\n    margin-bottom: 2vx;\n}\n.card:nth-child(2n + 1) {\n    background-color: var(--shadow);\n}\n.card div {\n    display: flex;\n    justify-content: space-between;\n    font-size: 3.5vw;\n}\n.card div:nth-child(4) {\n    justify-content: space-evenly;\n}\n.title {\n    font-weight: bolder;\n    padding-bottom: 2vh;\n}\n.project {\n    padding-bottom: 3vw;\n}\n.high {\n    border-left: 2vw solid #ff595e;\n}\n.medium {\n    border-left: 2vw solid #fcf6bd;\n}\n.low {\n    border-left: 2vw solid #52b788;\n}\n.card div button:hover {\n    background-color: var(--hover);\n    color: red;\n}\n.btnCard {\n    border: none;\n    padding: 0;\n    font-size: 4vw;\n    background: transparent;\n    cursor: pointer;\n    color: #cd4932;\n    width: 5vw;\n}\n.btnElement {\n    border: none;\n    background: transparent;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.strike {\n    text-decoration-line: line-through;\n    color: green;\n    font-weight: lighter;\n}\n#formAdd {\n    visibility: hidden;\n    padding: 2vw;\n    background-color: aliceblue;\n    width: 90vw;\n    position: fixed;\n    bottom: 20vh;\n    left: 7vw;\n    font-size: 2.5vw;\n}\n#formAdd span {\n    display: flex;\n}\n.btnNav {\n    width: 35%;\n    color: whitesmoke;\n    font-size: 3vh;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.btnForm {\n    background-color: var(--btnBGC);\n    width: 50%;\n    color: whitesmoke;\n    padding: 1vw;\n}\n.btnNav:hover,\n.btnForm:hover,\n#navSubMenu a:hover {\n    background-color: var(--hover);\n    color: whitesmoke;\n    cursor: pointer;\n}\n.close {\n    float: right;\n    transform: translateX(30%);\n    /* takes it outside the form */\n    border: 1px solid gray;\n    border-radius: 50%;\n    /* creates circle */\n    padding: 0.6em;\n    background: black;\n    color: white;\n    text-decoration: none;\n}\n.wide {\n    width: 100%;\n    padding: 1vw;\n    display: block;\n}\n#footer {\n    grid-area: footer;\n}\n#navbar ul {\n    background-color: var(--form);\n    display: flex;\n    justify-content: space-evenly;\n    padding-top: 2vw;\n    text-align: center;\n}\n.menuItem {\n    text-align: center;\n}\n.menuItem:hover {\n    background-color: #cd4932;\n}\n#navSubMenu {\n    visibility: hidden;\n    height: 0;\n    padding: 2vw 0;\n    position: relative;\n    bottom: 2vh;\n    font-weight: 500;\n}\n#navSubMenu > p,\n#navSubMenu > ul {\n    background-color: #cd4932;\n    padding: 2vw;\n    font-size: 3vw;\n    font-weight: 600;\n}\n@media only screen and (min-width: 600px) {\n    body {\n        font-size: 2vw;\n    }\n    #calendar {\n        font-size: 2vw;\n    }\n    .btnCard {\n        width: 3vw;\n    }\n    .card div {\n        font-size: 2vw;\n    }\n    #formAdd {\n        width: 70vw;\n        left: 20vw;\n        font-size: 2vw;\n    }\n    #navSubMenu {\n        display: block;\n        /* padding: 1vw; */\n        text-align: center;\n    }\n    #navSubMenu a {\n        font-size: 2vw;\n        padding-left: 1vw;\n    }\n    #navSubMenu p {\n        padding-left: 1vw;\n        font-size: 2vw;\n    }\n    #navbar ul {\n        font-size: 2vw;\n    }\n    .btnNav {\n        width: 5vw;\n    }\n    .tasksToday {\n        font-size: 2vw;\n    }\n}\n@media only screen and (min-width: 1025px) {\n    body {\n        grid-template-areas:\n            'header header'\n            'footer calendar'\n            'footer main';\n        grid-template-rows: auto auto auto;\n    }\n    #calendar {\n        /* overflow-y: unset; */\n        margin: 2vh;\n    }\n    #main {\n        margin: 2vh;\n        align-items: center;\n    }\n\n    #footer {\n        margin: 2vh;\n    }\n    #navbar ul {\n        display: block;\n        background-color: #a5dbe6;\n    }\n    #navbar ul li {\n        padding: 3vh 0;\n    }\n    #navbar ul img {\n        border-radius: 50%;\n        width: 5vw;\n    }\n    .card div {\n        font-size: 1vw;\n    }\n    .card {\n        margin: 1vw;\n        width: 50vw;\n    }\n    .menuItem {\n        padding: 0;\n    }\n    #navSubMenu {\n        padding: 0;\n        overflow: visible;\n        font-size: 1vw;\n    }\n    #navSubMenu a {\n        font-size: 1vw;\n    }\n    .btnCard {\n        width: 2vw;\n    }\n    .btnNav {\n        width: 3vw;\n        padding: 2vh 0;\n    }\n    .paraDay {\n        font-size: 2vw;\n    }\n    .tasksToday {\n        font-size: 1vw;\n    }\n}\n@media only screen and (min-width: 1200px) {\n    body {\n        font-size: 1vw;\n    }\n    #formAdd {\n        font-size: 1.5vw;\n        width: 50%;\n    }\n}\n","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,eAAe;IACf,gCAAgC;IAChC,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,gDAAgD;IAChD,yBAAyB;IACzB,eAAe;IACf,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,aAAa;IACb;;;;gBAIY;IACZ,qCAAqC;AACzC;AACA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,6BAA6B;IAC7B,kBAAkB;IAClB,cAAc;AAClB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,kBAAkB;IAClB,cAAc;IACd,UAAU;IACV,aAAa;IACb;wCACoC;AACxC;AACA;IACI,YAAY;IACZ,eAAe;IACf,+BAA+B;IAC/B,kBAAkB;IAClB;wCACoC;AACxC;AACA;IACI,aAAa;IACb,6BAA6B;AACjC;AACA;IACI,mCAAmC;IACnC,kBAAkB;AACtB;AACA;;;IAGI,iBAAiB;AACrB;AACA;;IAEI,+BAA+B;AACnC;AACA;IACI,gBAAgB;IAChB,cAAc;IACd,+BAA+B;IAC/B,iBAAiB;IACjB,kBAAkB;IAClB,cAAc;IACd,cAAc;IACd;wCACoC;AACxC;AACA;;IAEI,sBAAsB;IACtB,eAAe;IACf,wBAAwB;AAC5B;AACA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,cAAc;IACd,sBAAsB;IACtB,gBAAgB;AACpB;AACA;IACI,gBAAgB;IAChB,qBAAqB;AACzB;AACA;IACI,eAAe;IACf,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,8BAA8B;IAC9B,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,+BAA+B;AACnC;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,gBAAgB;AACpB;AACA;IACI,6BAA6B;AACjC;AACA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;AACA;IACI,mBAAmB;AACvB;AACA;IACI,8BAA8B;AAClC;AACA;IACI,8BAA8B;AAClC;AACA;IACI,8BAA8B;AAClC;AACA;IACI,8BAA8B;IAC9B,UAAU;AACd;AACA;IACI,YAAY;IACZ,UAAU;IACV,cAAc;IACd,uBAAuB;IACvB,eAAe;IACf,cAAc;IACd,UAAU;AACd;AACA;IACI,YAAY;IACZ,uBAAuB;IACvB;wCACoC;AACxC;AACA;IACI,kCAAkC;IAClC,YAAY;IACZ,oBAAoB;AACxB;AACA;IACI,kBAAkB;IAClB,YAAY;IACZ,2BAA2B;IAC3B,WAAW;IACX,eAAe;IACf,YAAY;IACZ,SAAS;IACT,gBAAgB;AACpB;AACA;IACI,aAAa;AACjB;AACA;IACI,UAAU;IACV,iBAAiB;IACjB,cAAc;IACd;wCACoC;AACxC;AACA;IACI,+BAA+B;IAC/B,UAAU;IACV,iBAAiB;IACjB,YAAY;AAChB;AACA;;;IAGI,8BAA8B;IAC9B,iBAAiB;IACjB,eAAe;AACnB;AACA;IACI,YAAY;IACZ,0BAA0B;IAC1B,8BAA8B;IAC9B,sBAAsB;IACtB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,iBAAiB;IACjB,YAAY;IACZ,qBAAqB;AACzB;AACA;IACI,WAAW;IACX,YAAY;IACZ,cAAc;AAClB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,6BAA6B;IAC7B,aAAa;IACb,6BAA6B;IAC7B,gBAAgB;IAChB,kBAAkB;AACtB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,gBAAgB;AACpB;AACA;;IAEI,yBAAyB;IACzB,YAAY;IACZ,cAAc;IACd,gBAAgB;AACpB;AACA;IACI;QACI,cAAc;IAClB;IACA;QACI,cAAc;IAClB;IACA;QACI,UAAU;IACd;IACA;QACI,cAAc;IAClB;IACA;QACI,WAAW;QACX,UAAU;QACV,cAAc;IAClB;IACA;QACI,cAAc;QACd,kBAAkB;QAClB,kBAAkB;IACtB;IACA;QACI,cAAc;QACd,iBAAiB;IACrB;IACA;QACI,iBAAiB;QACjB,cAAc;IAClB;IACA;QACI,cAAc;IAClB;IACA;QACI,UAAU;IACd;IACA;QACI,cAAc;IAClB;AACJ;AACA;IACI;QACI;;;yBAGiB;QACjB,kCAAkC;IACtC;IACA;QACI,uBAAuB;QACvB,WAAW;IACf;IACA;QACI,WAAW;QACX,mBAAmB;IACvB;;IAEA;QACI,WAAW;IACf;IACA;QACI,cAAc;QACd,yBAAyB;IAC7B;IACA;QACI,cAAc;IAClB;IACA;QACI,kBAAkB;QAClB,UAAU;IACd;IACA;QACI,cAAc;IAClB;IACA;QACI,WAAW;QACX,WAAW;IACf;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;QACV,iBAAiB;QACjB,cAAc;IAClB;IACA;QACI,cAAc;IAClB;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;QACV,cAAc;IAClB;IACA;QACI,cAAc;IAClB;IACA;QACI,cAAc;IAClB;AACJ;AACA;IACI;QACI,cAAc;IAClB;IACA;QACI,gBAAgB;QAChB,UAAU;IACd;AACJ",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --hover: #b0438a;\n    --shadow: #5ca3b4;\n    --form: #005f73;\n    --formBorder: hsl(234, 75%, 21%);\n    --button: #eee8aa;\n    --btnBGC: #24a0ed;\n}\n\nhtml {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    background-color: #a5dbe6;\n    font-size: 14px;\n    /* height: 100vh; */\n}\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-areas:\n        'header'\n        'calendar'\n        'main'\n        'footer';\n    grid-template-rows: auto 2fr 5fr auto;\n}\n#main,\n#calendar {\n    overflow-y: auto;\n}\n\nul {\n    list-style-type: none;\n}\n\n#header {\n    grid-area: header;\n    color: var(--button);\n    background-color: var(--form);\n    text-align: center;\n    padding: 1vh 0;\n}\n#calendar {\n    grid-area: calendar;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    text-align: center;\n    font-size: 3vw;\n    padding: 0;\n    margin: 1vh 0;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.arrow {\n    width: 2.5vw;\n    margin-top: 2vh;\n    background-color: var(--btnBGC);\n    border-radius: 50%;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n#calendar ul {\n    display: flex;\n    justify-content: space-evenly;\n}\n#calendar li {\n    border-left: dashed var(--form) 2px;\n    margin-right: 0.5%;\n}\n#calendar li:nth-child(1),\n#calendar li:nth-child(2),\n#calendar li:nth-child(9) {\n    border-left: none;\n}\n#calendar li:nth-child(1),\n#calendar li:nth-child(9) {\n    background-color: var(--shadow);\n}\n.paraDay {\n    font-weight: 300;\n    font-size: 2vw;\n    background-color: var(--shadow);\n    color: whitesmoke;\n    border-radius: 45%;\n    padding: 0.5vw;\n    margin: 0.25vw;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.paraDay:hover,\n.arrow:hover {\n    background-color: #fff;\n    cursor: pointer;\n    color: var(--formBorder);\n}\n.tasksToday {\n    text-align: left;\n    padding-left: 0.5vw;\n    font-size: 3vw;\n    font-family: monospace;\n    font-weight: 300;\n}\n.cardDay {\n    font-weight: 800;\n    width: calc(100% / 7);\n}\n#main {\n    grid-area: main;\n    display: flex;\n    flex-direction: column;\n}\n.card {\n    border: solid var(--hover) 1px;\n    padding: 1vw;\n    background-color: #93cdda;\n    margin-bottom: 2vx;\n}\n.card:nth-child(2n + 1) {\n    background-color: var(--shadow);\n}\n.card div {\n    display: flex;\n    justify-content: space-between;\n    font-size: 3.5vw;\n}\n.card div:nth-child(4) {\n    justify-content: space-evenly;\n}\n.title {\n    font-weight: bolder;\n    padding-bottom: 2vh;\n}\n.project {\n    padding-bottom: 3vw;\n}\n.high {\n    border-left: 2vw solid #ff595e;\n}\n.medium {\n    border-left: 2vw solid #fcf6bd;\n}\n.low {\n    border-left: 2vw solid #52b788;\n}\n.card div button:hover {\n    background-color: var(--hover);\n    color: red;\n}\n.btnCard {\n    border: none;\n    padding: 0;\n    font-size: 4vw;\n    background: transparent;\n    cursor: pointer;\n    color: #cd4932;\n    width: 5vw;\n}\n.btnElement {\n    border: none;\n    background: transparent;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.strike {\n    text-decoration-line: line-through;\n    color: green;\n    font-weight: lighter;\n}\n#formAdd {\n    visibility: hidden;\n    padding: 2vw;\n    background-color: aliceblue;\n    width: 90vw;\n    position: fixed;\n    bottom: 20vh;\n    left: 7vw;\n    font-size: 2.5vw;\n}\n#formAdd span {\n    display: flex;\n}\n.btnNav {\n    width: 35%;\n    color: whitesmoke;\n    font-size: 3vh;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.btnForm {\n    background-color: var(--btnBGC);\n    width: 50%;\n    color: whitesmoke;\n    padding: 1vw;\n}\n.btnNav:hover,\n.btnForm:hover,\n#navSubMenu a:hover {\n    background-color: var(--hover);\n    color: whitesmoke;\n    cursor: pointer;\n}\n.close {\n    float: right;\n    transform: translateX(30%);\n    /* takes it outside the form */\n    border: 1px solid gray;\n    border-radius: 50%;\n    /* creates circle */\n    padding: 0.6em;\n    background: black;\n    color: white;\n    text-decoration: none;\n}\n.wide {\n    width: 100%;\n    padding: 1vw;\n    display: block;\n}\n#footer {\n    grid-area: footer;\n}\n#navbar ul {\n    background-color: var(--form);\n    display: flex;\n    justify-content: space-evenly;\n    padding-top: 2vw;\n    text-align: center;\n}\n.menuItem {\n    text-align: center;\n}\n.menuItem:hover {\n    background-color: #cd4932;\n}\n#navSubMenu {\n    visibility: hidden;\n    height: 0;\n    padding: 2vw 0;\n    position: relative;\n    bottom: 2vh;\n    font-weight: 500;\n}\n#navSubMenu > p,\n#navSubMenu > ul {\n    background-color: #cd4932;\n    padding: 2vw;\n    font-size: 3vw;\n    font-weight: 600;\n}\n@media only screen and (min-width: 600px) {\n    body {\n        font-size: 2vw;\n    }\n    #calendar {\n        font-size: 2vw;\n    }\n    .btnCard {\n        width: 3vw;\n    }\n    .card div {\n        font-size: 2vw;\n    }\n    #formAdd {\n        width: 70vw;\n        left: 20vw;\n        font-size: 2vw;\n    }\n    #navSubMenu {\n        display: block;\n        /* padding: 1vw; */\n        text-align: center;\n    }\n    #navSubMenu a {\n        font-size: 2vw;\n        padding-left: 1vw;\n    }\n    #navSubMenu p {\n        padding-left: 1vw;\n        font-size: 2vw;\n    }\n    #navbar ul {\n        font-size: 2vw;\n    }\n    .btnNav {\n        width: 5vw;\n    }\n    .tasksToday {\n        font-size: 2vw;\n    }\n}\n@media only screen and (min-width: 1025px) {\n    body {\n        grid-template-areas:\n            'header header'\n            'footer calendar'\n            'footer main';\n        grid-template-rows: auto auto auto;\n    }\n    #calendar {\n        /* overflow-y: unset; */\n        margin: 2vh;\n    }\n    #main {\n        margin: 2vh;\n        align-items: center;\n    }\n\n    #footer {\n        margin: 2vh;\n    }\n    #navbar ul {\n        display: block;\n        background-color: #a5dbe6;\n    }\n    #navbar ul li {\n        padding: 3vh 0;\n    }\n    #navbar ul img {\n        border-radius: 50%;\n        width: 5vw;\n    }\n    .card div {\n        font-size: 1vw;\n    }\n    .card {\n        margin: 1vw;\n        width: 50vw;\n    }\n    .menuItem {\n        padding: 0;\n    }\n    #navSubMenu {\n        padding: 0;\n        overflow: visible;\n        font-size: 1vw;\n    }\n    #navSubMenu a {\n        font-size: 1vw;\n    }\n    .btnCard {\n        width: 2vw;\n    }\n    .btnNav {\n        width: 3vw;\n        padding: 2vh 0;\n    }\n    .paraDay {\n        font-size: 2vw;\n    }\n    .tasksToday {\n        font-size: 1vw;\n    }\n}\n@media only screen and (min-width: 1200px) {\n    body {\n        font-size: 1vw;\n    }\n    #formAdd {\n        font-size: 1.5vw;\n        width: 50%;\n    }\n}\n"],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(i[l]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],d=0;d<n.length;d++){var l=n[d],s=r.base?l[0]+r.base:l[0],c=o[s]||0,u="".concat(s," ").concat(c);o[s]=c+1;var A=t(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var f=a(m,r);r.byIndex=d,e.splice(d,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var d=t(o[i]);e[d].references--}for(var l=r(n,a),s=0;s<o.length;s++){var c=t(o[s]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function e(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function r(n){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},r(n)}function a(n){e(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===r(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t,r){e(2,arguments);var o=a(t),i=n(r);return isNaN(i)?new Date(NaN):i?(o.setDate(o.getDate()+i),o):o}function i(n){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i(n)}function d(n){return e(1,arguments),n instanceof Date||"object"===i(n)&&"[object Date]"===Object.prototype.toString.call(n)}function l(n){if(e(1,arguments),!d(n)&&"number"!=typeof n)return!1;var t=a(n);return!isNaN(Number(t))}function s(t,r){e(2,arguments);var o=a(t).getTime(),i=n(r);return new Date(o+i)}function c(t,r){e(2,arguments);var a=n(r);return s(t,-a)}var u=864e5;function A(n){e(1,arguments);var t=1,r=a(n),o=r.getUTCDay(),i=(o<t?7:0)+o-t;return r.setUTCDate(r.getUTCDate()-i),r.setUTCHours(0,0,0,0),r}function m(n){e(1,arguments);var t=a(n),r=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(r+1,0,4),o.setUTCHours(0,0,0,0);var i=A(o),d=new Date(0);d.setUTCFullYear(r,0,4),d.setUTCHours(0,0,0,0);var l=A(d);return t.getTime()>=i.getTime()?r+1:t.getTime()>=l.getTime()?r:r-1}function f(n){e(1,arguments);var t=m(n),r=new Date(0);r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0);var a=A(r);return a}var g=6048e5,h={};function v(){return h}function p(t,r){var o,i,d,l,s,c,u,A;e(1,arguments);var m=v(),f=n(null!==(o=null!==(i=null!==(d=null!==(l=null==r?void 0:r.weekStartsOn)&&void 0!==l?l:null==r||null===(s=r.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==d?d:m.weekStartsOn)&&void 0!==i?i:null===(u=m.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==o?o:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=a(t),h=g.getUTCDay(),p=(h<f?7:0)+h-f;return g.setUTCDate(g.getUTCDate()-p),g.setUTCHours(0,0,0,0),g}function C(t,r){var o,i,d,l,s,c,u,A;e(1,arguments);var m=a(t),f=m.getUTCFullYear(),g=v(),h=n(null!==(o=null!==(i=null!==(d=null!==(l=null==r?void 0:r.firstWeekContainsDate)&&void 0!==l?l:null==r||null===(s=r.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==d?d:g.firstWeekContainsDate)&&void 0!==i?i:null===(u=g.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==o?o:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var C=new Date(0);C.setUTCFullYear(f+1,0,h),C.setUTCHours(0,0,0,0);var w=p(C,r),b=new Date(0);b.setUTCFullYear(f,0,h),b.setUTCHours(0,0,0,0);var y=p(b,r);return m.getTime()>=w.getTime()?f+1:m.getTime()>=y.getTime()?f:f-1}function w(t,r){var a,o,i,d,l,s,c,u;e(1,arguments);var A=v(),m=n(null!==(a=null!==(o=null!==(i=null!==(d=null==r?void 0:r.firstWeekContainsDate)&&void 0!==d?d:null==r||null===(l=r.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:A.firstWeekContainsDate)&&void 0!==o?o:null===(c=A.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1),f=C(t,r),g=new Date(0);g.setUTCFullYear(f,0,m),g.setUTCHours(0,0,0,0);var h=p(g,r);return h}var b=6048e5;function y(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const I=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return y("yy"===e?r%100:r,e.length)},B=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):y(t+1,2)},T=function(n,e){return y(n.getUTCDate(),e.length)},x=function(n,e){return y(n.getUTCHours()%12||12,e.length)},k=function(n,e){return y(n.getUTCHours(),e.length)},S=function(n,e){return y(n.getUTCMinutes(),e.length)},M=function(n,e){return y(n.getUTCSeconds(),e.length)},E=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return y(Math.floor(r*Math.pow(10,t-3)),e.length)};var D={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return I(n,e)},Y:function(n,e,t,r){var a=C(n,r),o=a>0?a:1-a;return"YY"===e?y(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):y(o,e.length)},R:function(n,e){return y(m(n),e.length)},u:function(n,e){return y(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return y(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return y(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return B(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return y(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,r,o){var i=function(n,t){e(1,arguments);var r=a(n),o=p(r,t).getTime()-w(r,t).getTime();return Math.round(o/b)+1}(n,o);return"wo"===t?r.ordinalNumber(i,{unit:"week"}):y(i,t.length)},I:function(n,t,r){var o=function(n){e(1,arguments);var t=a(n),r=A(t).getTime()-f(t).getTime();return Math.round(r/g)+1}(n);return"Io"===t?r.ordinalNumber(o,{unit:"week"}):y(o,t.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):T(n,e)},D:function(n,t,r){var o=function(n){e(1,arguments);var t=a(n),r=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=t.getTime(),i=r-o;return Math.floor(i/u)+1}(n);return"Do"===t?r.ordinalNumber(o,{unit:"dayOfYear"}):y(o,t.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return y(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return y(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return y(a,e.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return x(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):k(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):y(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):y(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):S(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):M(n,e)},S:function(n,e){return E(n,e)},X:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return L(a);case"XXXX":case"XX":return U(a);default:return U(a,":")}},x:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return L(a);case"xxxx":case"xx":return U(a);default:return U(a,":")}},O:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+N(a,":");default:return"GMT"+U(a,":")}},z:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+N(a,":");default:return"GMT"+U(a,":")}},t:function(n,e,t,r){var a=r._originalDate||n;return y(Math.floor(a.getTime()/1e3),e.length)},T:function(n,e,t,r){return y((r._originalDate||n).getTime(),e.length)}};function N(n,e){var t=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),o=r%60;if(0===o)return t+String(a);var i=e||"";return t+String(a)+i+y(o,2)}function L(n,e){return n%60==0?(n>0?"-":"+")+y(Math.abs(n)/60,2):U(n,e)}function U(n,e){var t=e||"",r=n>0?"-":"+",a=Math.abs(n);return r+y(Math.floor(a/60),2)+t+y(a%60,2)}const z=D;var Y=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},j=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const W={p:j,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return Y(n,e);switch(a){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",Y(a,e)).replace("{{time}}",j(o,e))}};function P(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var O=["D","DD"],Q=["YY","YYYY"];function q(n){return-1!==O.indexOf(n)}function H(n){return-1!==Q.indexOf(n)}function F(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var J={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function G(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const R={date:G({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:G({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:G({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Z={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,o=null!=t&&t.width?String(t.width):a;r=n.formattingValues[o]||n.formattingValues[a]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[d]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const $={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function V(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,d=o[0],l=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(l)?K(l,(function(n){return n.test(d)})):_(l,(function(n){return n.test(d)}));i=n.valueCallback?n.valueCallback(s):s,i=t.valueCallback?t.valueCallback(i):i;var c=e.slice(d.length);return{value:i,rest:c}}}function _(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function K(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var nn,en={ordinalNumber:(nn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(nn.matchPattern);if(!t)return null;var r=t[0],a=n.match(nn.parsePattern);if(!a)return null;var o=nn.valueCallback?nn.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=n.slice(r.length);return{value:o,rest:i}}),era:V({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:V({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:V({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:V({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:V({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const tn={code:"en-US",formatDistance:function(n,e,t){var r,a=J[n];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:R,formatRelative:function(n,e,t,r){return Z[n]},localize:$,match:en,options:{weekStartsOn:0,firstWeekContainsDate:1}};var rn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,an=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,on=/^'([^]*?)'?$/,dn=/''/g,ln=/[a-zA-Z]/;function sn(t,r,o){var i,d,s,u,A,m,f,g,h,p,C,w,b,y,I,B,T,x;e(2,arguments);var k=String(r),S=v(),M=null!==(i=null!==(d=null==o?void 0:o.locale)&&void 0!==d?d:S.locale)&&void 0!==i?i:tn,E=n(null!==(s=null!==(u=null!==(A=null!==(m=null==o?void 0:o.firstWeekContainsDate)&&void 0!==m?m:null==o||null===(f=o.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==A?A:S.firstWeekContainsDate)&&void 0!==u?u:null===(h=S.locale)||void 0===h||null===(p=h.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==s?s:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=n(null!==(C=null!==(w=null!==(b=null!==(y=null==o?void 0:o.weekStartsOn)&&void 0!==y?y:null==o||null===(I=o.locale)||void 0===I||null===(B=I.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==b?b:S.weekStartsOn)&&void 0!==w?w:null===(T=S.locale)||void 0===T||null===(x=T.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==C?C:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var N=a(t);if(!l(N))throw new RangeError("Invalid time value");var L=P(N),U=c(N,L),Y={firstWeekContainsDate:E,weekStartsOn:D,locale:M,_originalDate:N},j=k.match(an).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,W[e])(n,M.formatLong):n})).join("").match(rn).map((function(n){if("''"===n)return"'";var e=n[0];if("'"===e)return cn(n);var a=z[e];if(a)return null!=o&&o.useAdditionalWeekYearTokens||!H(n)||F(n,r,String(t)),null!=o&&o.useAdditionalDayOfYearTokens||!q(n)||F(n,r,String(t)),a(U,n,M.localize,Y);if(e.match(ln))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return n})).join("");return j}function cn(n){var e=n.match(on);return e?e[1].replace(dn,"'"):n}const un=function(n){const e=document.getElementsByClassName("cardDay");let t=0;for(t=0;t<=e.length-1;t++){const r=document.createElement("p");r.classList.add("paraDay");const a=document.createElement("p");a.classList.add("tasksToday");const i=n||new Date,d=o(i,t);e[t].innerText=sn(d,"EEE"),e[t].appendChild(r),e[t].appendChild(a),r.innerText=sn(d,"dd MMM yy");const l=sn(o(i,t),"yyyy-MM-dd"),s=JSON.parse(window.localStorage.getItem("ToDoList")).filter((n=>n.deadline===l));let c=0;for(c=0;c<=s.length-1;c++)a.innerHTML+=`<br>${c+1}: ${s[c].title}<br>`}};function An(n,e,t,r,a,o){return{title:n,description:e,priority:t,project:r,deadline:a,completed:o}}function mn(n){const e=JSON.parse(window.localStorage.getItem("ToDoList")),t=document.getElementById("title").value.toUpperCase();if(""===t)return void alert("PLEASE ENTER A TASK TITLE");if(e.some((n=>n.title===t))&&"number"!=typeof n||e.some((n=>n.title===t))&&"number"==typeof n&&t!==e[n].title)return void alert(`"${t}": CHANGE TASK TITLE TO AVOID DUPLICATES`);const r=document.getElementById("description").value;let a=document.getElementById("priorityLevel").value;switch(a){case"High":a=3;break;case"Medium":a=2;break;case"Low":a=1}let o=document.getElementById("project").value;o||(o="Unknown");const i=document.getElementById("deadline").value;!function(n,e){const t=JSON.parse(window.localStorage.getItem("ToDoList"));"number"==typeof e?t.splice(e,1,n):t.push(n),localStorage.setItem("ToDoList",JSON.stringify(t))}(An(t,r,a,o,i,!1),n)}function fn(n){n.preventDefault();const e=document.querySelectorAll(".wide");let t=0;for(t=0;t<=e.length-1;t++)e[t].value=""}const gn=function(n){document.getElementById("formAdd").style.visibility="visible";const e=JSON.parse(window.localStorage.getItem("ToDoList")),t=[...new Set(e.map((n=>n.project)))];t.sort(((n,e)=>n>e?1:-1));const r=document.querySelector("#projects");for(let n=0;n<=t.length-1;n++){const e=document.createElement("option");e.value=t[n],e.text=t[n],r.appendChild(e)}document.querySelector("#btnCancel").addEventListener("click",fn);const a=document.querySelector("#btnSave");n>=0?a.addEventListener("click",(()=>{mn(n)}),!1):a.addEventListener("click",mn);const o=document.getElementById("title");o.focus(),o.select()};Math.pow(10,8);var hn=36e5;function vn(t,r){var a;e(1,arguments);var o=n(null!==(a=null==r?void 0:r.additionalDigits)&&void 0!==a?a:2);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,d=yn(t);if(d.date){var l=In(d.date,o);i=Bn(l.restDateString,l.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,c=i.getTime(),u=0;if(d.time&&(u=xn(d.time),isNaN(u)))return new Date(NaN);if(!d.timezone){var A=new Date(c+u),m=new Date(0);return m.setFullYear(A.getUTCFullYear(),A.getUTCMonth(),A.getUTCDate()),m.setHours(A.getUTCHours(),A.getUTCMinutes(),A.getUTCSeconds(),A.getUTCMilliseconds()),m}return s=Sn(d.timezone),isNaN(s)?new Date(NaN):new Date(c+u+s)}var pn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Cn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,wn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,bn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function yn(n){var e,t={},r=n.split(pn.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?e=r[0]:(t.date=r[0],e=r[1],pn.timeZoneDelimiter.test(t.date)&&(t.date=n.split(pn.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var a=pn.timezone.exec(e);a?(t.time=e.replace(a[1],""),t.timezone=a[1]):t.time=e}return t}function In(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:n.slice((r[1]||r[2]).length)}}function Bn(n,e){if(null===e)return new Date(NaN);var t=n.match(Cn);if(!t)return new Date(NaN);var r=!!t[4],a=Tn(t[1]),o=Tn(t[2])-1,i=Tn(t[3]),d=Tn(t[4]),l=Tn(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,d,l)?function(n,e,t){var r=new Date(0);r.setUTCFullYear(n,0,4);var a=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,d,l):new Date(NaN);var s=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(Mn[e]||(En(n)?29:28))}(e,o,i)&&function(n,e){return e>=1&&e<=(En(n)?366:365)}(e,a)?(s.setUTCFullYear(e,o,Math.max(a,i)),s):new Date(NaN)}function Tn(n){return n?parseInt(n):1}function xn(n){var e=n.match(wn);if(!e)return NaN;var t=kn(e[1]),r=kn(e[2]),a=kn(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,a)?t*hn+6e4*r+1e3*a:NaN}function kn(n){return n&&parseFloat(n.replace(",","."))||0}function Sn(n){if("Z"===n)return 0;var e=n.match(bn);if(!e)return 0;var t="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,a)?t*(r*hn+6e4*a):NaN}var Mn=[31,null,31,30,31,30,31,31,30,31,30,31];function En(n){return n%400==0||n%4==0&&n%100!=0}const Dn=function(n){const e=n.target.parentElement.parentElement.previousElementSibling,t=n.target.parentElement.parentElement.previousElementSibling.previousElementSibling,r=n.target.classList[1],a=n.target.parentElement;"detail"===r?(a.innerHTML="<img src = 'images/slim.png' class = 'btnCard slim'>",e.style.display="block",t.style.display="block"):(a.innerHTML="<img src = 'images/detail.png' class = 'btnCard detail'>",e.style.display="none",t.style.display="none")},Nn=function(n){const e=n.target.parentElement.parentElement.parentElement.childNodes[0].childNodes[0].firstChild.data,t=JSON.parse(window.localStorage.getItem("ToDoList")),r=t.findIndex((n=>n.title===e));t.length<=1?alert("This is the last task - DO NOT TRY TO DELETE"):confirm("The deletion will be final: PROCEED?")&&(t.splice(r,1),localStorage.setItem("ToDoList",JSON.stringify(t)),n.target.parentElement.parentElement.parentElement.innerHTML="")},Ln=function(n){const e=JSON.parse(window.localStorage.getItem("ToDoList")),t=n.target.parentElement.parentElement.parentElement.childNodes[0].childNodes[0].firstChild.data,r=n.target.parentElement.parentElement.parentElement.childNodes[0].childNodes[0],a=e.findIndex((n=>n.title===t));!1===e[a].completed?e[a].completed=!0:e[a].completed=!1,localStorage.setItem("ToDoList",JSON.stringify(e)),'<img src="images/pending.png" class="btnCard done">'===n.target.parentElement.innerHTML?(n.target.parentElement.innerHTML='<img src="images/check.png" class="btnCard done">',r.classList.add("strike"),r.nextSibling.classList.add("strike")):(n.target.parentElement.innerHTML='<img src="images/pending.png" class="btnCard done">',r.classList.remove("strike"),r.nextSibling.classList.remove("strike"))},Un=function(n){const e=JSON.parse(window.localStorage.getItem("ToDoList")),t=n.target.parentElement.parentElement.parentElement.childNodes[0].childNodes[0].firstChild.data,r=e.findIndex((n=>n.title===t));gn(r),document.getElementById("title").value=e[r].title,document.getElementById("description").value=e[r].description,document.getElementById("project").value=e[r].project,document.getElementById("deadline").value=e[r].deadline;let a="";switch(e[r].priority){case 3:a="High";break;case 2:a="Medium";break;case 1:a="Low"}document.getElementById("priorityLevel").value=a},zn=function(n){const e=n||JSON.parse(window.localStorage.getItem("ToDoList")),t=document.getElementById("main");let r=e.length;for(r=e.length-1;r>=0;r--){const n=document.createElement("card");n.classList.add("card");const a=document.createElement("div");n.appendChild(a);const o=document.createElement("div");n.appendChild(o);const i=document.createElement("div");n.appendChild(i);const d=document.createElement("div");n.appendChild(d);const l=document.createElement("p");l.classList.add("title"),l.innerHTML=e[r].title,a.appendChild(l);const s=document.createElement("deadline");s.classList.add("deadline");const c=`${e[r].deadline}`;c&&(s.innerHTML=sn(vn(c),"EEE, dd MMM yyyy")),a.appendChild(s);const u=document.createElement("project");u.classList.add("project"),u.innerHTML=`<b>Project</b>: ${e[r].project}`,o.appendChild(u);const A=document.createElement("description");A.classList.add("description"),A.innerHTML=`<i>${e[r].description}</i>`,i.appendChild(A);const m=document.createElement("button");m.classList.add("btnElement"),m.addEventListener("click",Ln),!0===e[r].completed?m.innerHTML="<img src = 'images/check.png' class = 'btnCard done'>":m.innerHTML="<img src = 'images/pending.png' class = 'btnCard done'>",d.appendChild(m);const f=document.createElement("button");f.addEventListener("click",Dn),f.classList.add("btnElement"),f.innerHTML="<img src = 'images/detail.png' class = 'btnCard detail'>",d.appendChild(f);const g=document.createElement("button");g.addEventListener("click",Un),g.classList.add("btnElement"),g.innerHTML="<img src = 'images/edit.png' class = 'btnCard edit'>",d.appendChild(g);const h=document.createElement("button");h.addEventListener("click",Nn),h.classList.add("btnElement"),h.innerHTML="<img src = 'images/delete.png' class = 'btnCard delete'>",d.appendChild(h),3===e[r].priority&&n.classList.add("high"),2===e[r].priority&&n.classList.add("medium"),1===e[r].priority&&n.classList.add("low"),!0===e[r].completed&&(n.style.borderLeft="none",n.classList.add("strike")),o.style.display="none",i.style.display="none",t.appendChild(n)}};function Yn(n){document.getElementById("main").innerHTML="";const e=n.target.innerText,t=JSON.parse(window.localStorage.getItem("ToDoList"));e.includes("Date")?t.sort(((n,e)=>n.deadline>e.deadline?1:-1)):e.includes("Title")?t.sort(((n,e)=>n.title<e.title?1:-1)):e.includes("Priority")?t.sort(((n,e)=>n.priority>e.priority?1:-1)):e.includes("Done")&&t.sort(((n,e)=>n.completed>e.completed?1:-1)),localStorage.setItem("ToDoList",JSON.stringify(t)),document.querySelector("#navSubMenu").style.visibility="hidden",zn()}function jn(n){const e=JSON.parse(window.localStorage.getItem("ToDoList")).filter((e=>e.project===n.target.innerHTML)),t=document.querySelector("#navSubMenu"),r=document.querySelector("#subMenuUL");t.style.visibility="hidden",r.innerHTML="",zn(e)}function Wn(n){let e=parseInt(n.slice(0,2),10);e=e.toString();const t=n.slice(3,6),r=n.slice(7,9);return new Date(`20${r},${t},${e}`)}function Pn(n){const e=sn(Wn(n.target.innerText),"yyyy-MM-dd"),t=JSON.parse(window.localStorage.getItem("ToDoList")).filter((n=>n.deadline===e));document.getElementById("main").innerHTML="",zn(t)}function On(){const n=document.getElementsByClassName("paraDay");let e=0;for(e=0;e<=n.length-1;e++)n[e].addEventListener("click",Pn)}function Qn(n){let e=Wn(n.target.parentElement.nextElementSibling.children[0].innerText);e=o(e,-7),un(e),On()}function qn(n){let e=Wn(n.target.parentElement.previousElementSibling.children[0].innerText);e=o(e,1),un(e),On()}function Hn(n){n.target.className.includes("plus")?gn():n.target.className.includes("sort")?function(){document.querySelector("#subMenuTitle").innerText="SORT BY:";const n=document.querySelector("#subMenuUL"),e=["Title","Date","Priority","Done"];let t=0;for(t=0;t<=e.length-1;t++){const r=document.createElement("li");r.classList.add("options"),r.innerText=e[t],r.addEventListener("click",Yn),n.appendChild(r)}document.querySelector("#navSubMenu").style.visibility="visible"}():n.target.className.includes("home")?function(){document.querySelector("#main").innerHTML="";const n=JSON.parse(window.localStorage.getItem("ToDoList"));n.sort(((n,e)=>n.deadline>e.deadline?1:-1)),zn(n),un(),On()}():n.target.className.includes("project")&&function(){document.querySelector("#subMenuTitle").innerText="PROJECTS:";const n=document.querySelector("#subMenuUL"),e=document.getElementById("navSubMenu");document.getElementById("main").innerHTML="";const t=JSON.parse(window.localStorage.getItem("ToDoList")),r=[...new Set(t.map((n=>n.project)))];r.sort(((n,e)=>n>e?1:-1));let a=0;for(a=0;a<=r.length-1;a++){const e=document.createElement("li");e.classList.add("options"),e.innerHTML=`${r[a]}`,e.addEventListener("click",jn),n.appendChild(e)}e.style.visibility="visible"}()}var Fn=t(379),Jn=t.n(Fn),Gn=t(795),Rn=t.n(Gn),Zn=t(569),Xn=t.n(Zn),$n=t(565),Vn=t.n($n),_n=t(216),Kn=t.n(_n),ne=t(589),ee=t.n(ne),te=t(341),re={};re.styleTagTransform=ee(),re.setAttributes=Vn(),re.insert=Xn().bind(null,"head"),re.domAPI=Rn(),re.insertStyleElement=Kn(),Jn()(te.Z,re),te.Z&&te.Z.locals&&te.Z.locals,function(){const n=localStorage.getItem("ToDoList");if(null===n||n.length<3){alert("\n\nLocal Storage is either empty or does not exist. \n \nCreating 'local-storage' list array with a sample task");const n=An("BUY MILK","From here, we can easily conclude that it’s best to go for three sizes: desktop, tablet, and phone.",3,"Groceries",new Date,!1),e=[];e.push(n),localStorage.setItem("ToDoList",JSON.stringify(e))}zn(),un(0),function(){const n=document.getElementsByClassName("menuItem");let e=0;for(e=0;e<=n.length-1;e++)n[e].addEventListener("click",Hn)}(),On(),document.querySelector("#arrowRight").addEventListener("click",qn),document.querySelector("#arrowLeft").addEventListener("click",Qn)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,